apiVersion: v1
kind: Namespace
metadata:
  name: k8snetlook

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8snetlook
  namespace: k8snetlook

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: k8snetlook
rules:
  - apiGroups: [""]
    resources: ["pods", "nodes", "endpoints", "services", "serviceaccounts", "secrets"]
    verbs: ["get", "list"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8snetlook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8snetlook
subjects:
  - kind: ServiceAccount
    name: k8snetlook
    namespace: k8snetlook

---

apiVersion: batch/v1
kind: Job
metadata:
  name: k8snetlook
  namespace: k8snetlook
spec:
  template:
    spec:
      hostNetwork: true
      hostPID: true
      serviceAccountName: k8snetlook
      nodeSelector:
        ## Change hostname to represent the host that is running the src pod
        kubernetes.io/hostname: ip-10-0-1-253.us-west-2.compute.internal
      containers:
      - name: k8snetlook
        image: sarun87/k8snetlook:v0.3
        ## Edit command suite your debugging needs
        command: ["/k8snetlook", "host"]
        ## Pod debugging example
        #command: ["/k8snetlook", "pod", "-srcpodname=nginx-6db489d4b7-2hww8", "-srcpodns=default", "-dstpodname=nginx-6db489d4b7-9l264", "-dstpodns=default", "-externalip=8.8.8.8"]
        volumeMounts:
          - mountPath: /var/run/docker.sock
            name: docker-socket
        securityContext:
            privileged: true
      volumes:
      - name: docker-socket
        hostPath:
            path: /var/run/docker.sock
            type: Socket
      restartPolicy: Never
  backoffLimit: 0
